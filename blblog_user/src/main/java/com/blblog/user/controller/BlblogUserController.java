package com.blblog.user.controller;import com.alibaba.fastjson.JSON;import com.baomidou.mybatisplus.core.metadata.IPage;import com.baomidou.mybatisplus.extension.plugins.pagination.Page;import com.blblog.user.service.BlblogUserService;import com.blblog.user.utils.JwtUtil;import entity.BlblogUser;import entity.PageResult;import entity.Result;import entity.StatusCode;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.access.prepost.PreAuthorize;import org.springframework.security.crypto.bcrypt.BCrypt;import org.springframework.web.bind.annotation.*;import javax.servlet.http.Cookie;import javax.servlet.http.HttpServletResponse;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.UUID;/** * <p> * 用户 前端控制器 * </p> * * @author lbl * @since 2020-01-23 */@RestController@RequestMapping("/user")public class BlblogUserController {    @Autowired    private BlblogUserService blblogUserService;    /***     * 用户登录     */    @RequestMapping(value = "/login")    public Result login(String username, String password, HttpServletResponse response){        //查询用户信息        BlblogUser blblogUser = blblogUserService.findUserByName(username);        if(blblogUser!=null && BCrypt.checkpw(password,blblogUser.getPassword())){            //设置令牌信息,1,唯一id2,创建令牌的信息3,过期时间            Map<String,Object> info = new HashMap<String,Object>();            info.put("role","USER");            info.put("success","SUCCESS");            info.put("username",username);            //生成令牌            String jwt = JwtUtil.createJWT(UUID.randomUUID().toString(), JSON.toJSONString(info),null);            //存入cookie            Cookie cookie = new Cookie("Authori",jwt);            cookie.setDomain("localhost");            cookie.setPath("/");            response.addCookie(cookie);            return new Result(true,StatusCode.OK,"登录成功！",jwt);        }        return  new Result(false,StatusCode.LOGINERROR,"账号或者密码错误！");    }    /**     * 分页条件查询     * @param page     * @param limit     * BlblogDto :查询条件     * @return     */    @PostMapping("{page}/{limit}")    public Result pageQuery(@PathVariable Long page, @PathVariable Long limit, @RequestBody BlblogUser blblogUser) {        //创建分页对象工具Page        Page<BlblogUser> userPage = new Page<>(page,limit);        //调用分页方法        IPage<BlblogUser> iPage = blblogUserService.pageQuery(userPage, blblogUser);        //获取返回结果        List<BlblogUser> records = iPage.getRecords();        //获取总条数        long total = iPage.getTotal();        //创建返回分页结果对象        PageResult<BlblogUser> pageResult = new PageResult<>(total,records);        //将对象返回        return new Result(true, StatusCode.OK,"查询成功",pageResult);    }    //分页查询    @GetMapping("{page}/{limit}")    public Result pageQuery(@PathVariable Long page, @PathVariable Long limit) {        //创建分页对象工具Page        Page<BlblogUser> labelPage = new Page<>(page,limit);        //调用分页方法        IPage<BlblogUser> iPage = blblogUserService.page(labelPage, null);        //获取返回结果        List<BlblogUser> records = iPage.getRecords();        //获取总条数        long total = iPage.getTotal();        //创建返回分页结果对象        PageResult<BlblogUser> pageResult = new PageResult<>(total,records);        //将对象返回        return new Result(true,StatusCode.OK,"查询成功",pageResult);    }    //查询列表    @PreAuthorize("hasAnyRole('admin')")    @GetMapping    public Result findAll() {        List<BlblogUser> blblogArticles = blblogUserService.list(null);        return new Result(true, StatusCode.OK,"查询成功",blblogArticles);    }    //根据ID查询,    @RequestMapping("{id}")    public Result findById(@PathVariable Long id) {        BlblogUser article = blblogUserService.getById(id);        return new Result(true,StatusCode.OK,"查询成功",article);    }    //这个IP先放行，配合权限服务器s    @GetMapping("/load/{username}")    public BlblogUser findByLoginname(@PathVariable(value = "username") String username) {        BlblogUser blblogUser = blblogUserService.findUserByName(username);        return blblogUser;    }    //增加User    @PostMapping("/add")    public Result addArticle(@RequestBody BlblogUser blblogUser) {        blblogUserService.register(blblogUser);        return new Result(true,StatusCode.OK,"新增成功");    }    //修改    @PutMapping    public Result updateBlblogArticle(@RequestBody BlblogUser blblogUser) {        blblogUserService.updateById(blblogUser);        return new Result(true,StatusCode.OK,"修改成功");    }    //根据id删除    @DeleteMapping("{id}")    public Result removeBlblogArticle(@PathVariable Long id) {        blblogUserService.removeById(id);        return new Result(true,StatusCode.OK,"删除成功");    }}